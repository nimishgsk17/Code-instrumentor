FunctionPrinterVisitor
Derived from RecursiveASTVisitor<FunctionPrinterVisitor>
designed to traverse the Abstract Syntax Tree (AST) generated by Clang for a given C++ source file. 
Its key responsibilities include identifying specific nodes within the AST (in this case, statements) and performing actions (such as inserting text) based on those nodes.

VisitStmt(Stmt *s): 
    This overridden method is called for each statement encountered during the traversal of the AST. 
    It checks if the statement is not a CompoundStmt to avoid inserting std::cout statements before compound statements (e.g., before opening braces of a function or loop).
    For suitable statements, it calculates the line number and inserts a std::cout statement before the statement if it hasn't been processed already, avoiding duplicates on the same line.
    
FunctionPrinterASTConsumer
Inherits from ASTConsumer, a Clang class that consumes the AST of a C++ source file. An ASTConsumer can perform analyses or transformations on the AST.

FunctionPrinterASTConsumer(Rewriter &R): The constructor initializes the FunctionPrinterVisitor with a Rewriter, which is used to modify the source code based on AST analysis.
HandleTranslationUnit(ASTContext &Context): This method is called once per translation unit (source file). It uses the FunctionPrinterVisitor to traverse and process the AST. This is where the AST traversal starts, leading to the visiting of statements and the insertion of std::cout statements.
FunctionPrinterFrontendAction
Derived from ASTFrontendAction, it specifies the action the Clang frontend should perform upon the source code. Frontend actions typically involve parsing the source code, optionally analyzing or transforming it, and possibly emitting output.

CreateASTConsumer(CompilerInstance &CI, StringRef file): Overrides a method from ASTFrontendAction to create and return an ASTConsumer specific to this tool, which is FunctionPrinterASTConsumer. This consumer is then used by Clang to process the AST.
EndSourceFileAction(): Called after a source file has been processed. This is where the tool outputs the modified source code by writing the changes made by the Rewriter to standard output or a file.
main(int argc, const char **argv)
The entry point for the tool, responsible for setting up and running the tool based on command-line arguments.

Initializes the tool using CommonOptionsParser::create, which parses command-line arguments specific to Clang tools and sets up a compilation database if one is available. This step is crucial for understanding how the source files should be compiled and processed.
Creates a ClangTool instance configured with the parsed options and source paths. ClangTool is a utility class that simplifies running custom actions on C++ code.
Runs the tool with newFrontendActionFactory<FunctionPrinterFrontendAction>().get(). This factory pattern is used to create instances of FunctionPrinterFrontendAction for each source file processed by the tool, facilitating the analysis and transformation specified by the action.

